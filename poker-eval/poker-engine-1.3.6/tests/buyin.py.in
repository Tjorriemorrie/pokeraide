# -*- mode: python -*-
# Copyright (C) 2006 - 2010 Loic Dachary <loic@dachary.org>
# Copyright (C) 2004, 2005, 2006 Mekensleep
#
# Mekensleep
# 26 rue des rosiers
# 75004 Paris
#       licensing@mekensleep.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors:
#  Loic Dachary <loic@dachary.org>
#

import sys, os
sys.path.insert(0, "@top_srcdir@")
sys.path.insert(0, "..")

import unittest
from pokerengine.pokergame import PokerGameServer

class TestBuyIn(unittest.TestCase):

    def setUp(self):
        self.game = PokerGameServer("poker.%s.xml", [ "../conf", "@top_srcdir@/conf" ])
        self.game.verbose = int(os.environ.get('VERBOSE_T', 3))
        self.game.setVariant("holdem")
        self.game.setBettingStructure("2-4-limit")

    def tearDown(self):
        del self.game

    def log(self, string):
        print string

    def make_new_player(self, serial, seat):
        game = self.game
        self.failUnless(game.addPlayer(serial, seat))
        self.failUnless(game.payBuyIn(serial, game.bestBuyIn()))
        self.failUnless(game.sit(serial))
        game.botPlayer(serial)
        game.noAutoBlindAnte(serial)

    def pay_blinds(self):
        game = self.game
        for serial in game.serialsAll():
            game.autoBlindAnte(serial)
        for serial in game.serialsAll():
            game.noAutoBlindAnte(serial)

    def test1(self):
        game = self.game
        self.failUnless(game.addPlayer(1))
        self.failIf(game.payBuyIn(1, game.buyIn() - 1))
        self.failIf(game.getPlayer(1).buy_in_payed)
        self.failIf(game.payBuyIn(1, game.maxBuyIn() + 1))
        self.failIf(game.getPlayer(1).buy_in_payed)
        self.failUnless(game.payBuyIn(1, game.bestBuyIn()))
        self.failUnless(game.getPlayer(1).buy_in_payed)

        self.failUnless(game.addPlayer(2))
        self.failUnless(game.payBuyIn(2, game.maxBuyIn()))
        self.failUnless(game.getPlayer(2).buy_in_payed)

    def test2(self):
        for (serial, seat) in ((1, 0), (2, 1), (3, 2), (4, 3)):
            self.make_new_player(serial, seat)
        self.game.beginTurn(1)
        self.failIf(self.game.rebuy(300000, self.game.bestBuyIn()))
        self.failUnless(self.game.rebuy(1, 1))
        self.assertEqual(self.game.getPlayer(1).rebuy, 1)
        self.failIf(self.game.rebuy(1, self.game.maxBuyIn()))
        self.assertEqual(self.game.getPlayer(1).rebuy, 1)
        self.failUnless(self.game.rebuy(1, 1))
        self.assertEqual(self.game.getPlayer(1).rebuy, 2)
        self.pay_blinds()
        self.assertEqual(self.game.getPlayer(1).rebuy, 0)
        money = self.game.getPlayerMoney(1)
        self.failUnless(self.game.rebuy(1, 1))
        self.assertEqual(self.game.getPlayerMoney(1), money + 1)

def run():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestBuyIn))
    # Comment out above and use line below this when you wish to run just
    # one test by itself (changing prefix as needed).
#    suite.addTest(unittest.makeSuite(TestBuyIn, prefix = "test2"))
    verbosity = int(os.environ.get('VERBOSE_T', 2))
    return unittest.TextTestRunner(verbosity=verbosity).run(suite)
    
if __name__ == '__main__':
    if run().wasSuccessful():
        sys.exit(0)
    else:
        sys.exit(1)

# Interpreted by emacs
# Local Variables:
# compile-command: "( cd .. ; ./config.status tests/buyin.py ) ; ( cd ../tests ; make TESTS='buyin.py' check )"
# End:
